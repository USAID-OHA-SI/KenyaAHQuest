---
title: "Advanced HIV Disease Newly initiated cleaning"
author: "Nelly Maina"
format: html
editor: visual
---

## Newly Initiated

From the National Data Warehouse (NDW), line list all clients who were newly initiated(TX_NEW) at any time between the period October 1, 2022, and September 30, 2023 (FY23). DO NOT double-report clients. De-identify the clients. Do not include any information that can identify them. Ensure the de-identified number can be used to link back to the client in case there is a need to address any data quality issues.

## Variable description

For each client listed, indicate the following variables: a). Implementing Partner - indicate the current implementing partner supporting the facility where the client receives ART treatment. b). Facility Name - facility or clinic where the client receives ART treatment. c). Facility MFL Code - facility or clinic master facility code where the client receives ART treatment. d). County â€“ the county where the facility is located. e). Client Number - the unique de-identified number allocated to the client for identification. f). Date of Birth - indicate the client's date of birth. The dates take the format DD/MM/YYYY. g). Sex - Male or Female. h). Date of HIV Diagnosis - indicate the date the client received an HIV-positive diagnosis. The dates take the format DD/MM/YYYY. i). Entry point at HIV Diagnosis - indicate the client's entry point at HIV diagnosis PMTCT, OPD, VCT, TB clinic e.t.c j). WHO stage at HIV Diagnosis - indicates the WHO clinical staging at diagnosis. k). Date of ART Initiation - indicates the date the client started the ART treatment. The dates take the format DD/MM/YYYY. l). ART Regimen at Initiation - indicate the client's ART regimen at treatment initiation. m). ART Regimen Line at Initiation - indicate whether the ART regimen indicated in (l) above is either first-line, second-line, or third-line. n). Current ART regimen - indicate the current ART regimen the client is on. o). Date of ART regimen change - if the current ART regimen is different from the ART regimen at initiation, then indicate the date when the change occurred. The dates take the format DD/MM/YYYY.

Load packages

```{r}
library(tidyverse)
library(glamr)
library(readxl)
library(janitor)
library(lubridate)
library(stringr)
library(readr)
```

Read the data from the Newly Initiated tab

```{r}

#df_new <- read_excel("Data/Data - AHD.xlsx", sheet = "1. Newly Initiated ", col_names = FALSE)
# Correct file path
df_new <- read_excel("Data/Data - AHD.xlsx", sheet = "1. Newly Initiated", col_names = FALSE)


# Use the second row as the column names
colnames(df_new) <- df_new[2, ]

# Remove the first two rows
df_new <- df_new[-c(1, 2), ]

# Convert the necessary columns to the appropriate types
df_new <- df_new %>%
  mutate(
    `Date of HIV Diagnosis` = as.Date(as.numeric(`Date of HIV Diagnosis`), origin = "1899-12-30"),
    `Date of Birth` = as.Date(as.numeric(`Date of Birth`), origin = "1899-12-30"),
    `Date of ART Initiation` = as.Date(as.numeric(`Date of ART Initiation`), origin = "1899-12-30"),
    `Date of ART regimen change` = as.Date(as.numeric(`Date of ART regimen change`), origin = "1899-12-30"),
    `Implementing Partner` = as.factor(`Implementing Partner`),
    `Facility Name` = as.factor(`Facility Name`),
    `Sex` = as.factor(Sex),
    `Entry point at HIV Diagnosis` = as.factor(`Entry point at HIV Diagnosis`),
     `County` = as.factor(`County`),
    `ART Regimen at Initiation` = as.factor(`ART Regimen at Initiation`),
    `ART  Regimen Line at Initiation` = as.factor(`ART  Regimen Line at Initiation`),
     `Current ART regimen` = as.factor(`Current ART regimen`)
    
  )

```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
# Renaming columns
df_new <- df_new %>% clean_names()
print(names(df_new))

df_new <- df_new %>%
  rename(
    ip = implementing_partner,
    facility = facility_name,
    mfl_code = facility_mfl_code,
    county = county,
    id = client_number_de_identified,
    dob = date_of_birth,
    sex = sex,
    hiv_diag_date = date_of_hiv_diagnosis,
    diag_entry_date = entry_point_at_hiv_diagnosis,
    who_state_at_diag = who_stage_at_hiv_diagnosis,
    art_init_date = date_of_art_initiation,
    art_init_reg = art_regimen_at_initiation,
    init_reg_line = art_regimen_line_at_initiation,
    curr_reg = current_art_regimen,
    date_reg_change = date_of_art_regimen_change
  )

```

check for duplicates _ no full duplicates found 

```{r}
# Check for duplicates by all variables
duplicates_all <- df_new %>%
  filter(duplicated(.))

# Display the number of duplicates by all variables
cat("Number of duplicates by all variables:", nrow(duplicates_all), "\n")

# Display the duplicated rows by all variables
print(duplicates_all)

# Check for duplicates by client_id
duplicatesid <- df_new %>%
  group_by(id) %>%
  filter(n() > 1) %>%
  ungroup()

# Display the number of duplicates by client_id
cat("Number of duplicates by client_id:", nrow(duplicatesid), "\n")

# Display the duplicated rows by client_id
print(duplicatesid)

```

 Uderstand the Hiv_diagnosis date
```{r}
 summary(df_new$hiv_diag_date)


# Determine the date range for diagnosis_date
date_range <- df_new %>%
  summarise(
    min_date = min(hiv_diag_date, na.rm = TRUE),
    max_date = max(hiv_diag_date, na.rm = TRUE)
  )

# Display the date range
print(date_range)

```


#674 observations without diagnosis dates,  which need to be excluded 

# we  also have 2999 tx_new that occur before October 1,2022 
 from the next chunk we will exclude 3673 observations




```{r}

# Count total observations
total_observations <- nrow(df_new)

# Handle NA values and unexpected dates
# Count observations with NA hiv_diag_date
num_na_diag_date <- sum(is.na(df_new$hiv_diag_date))

# Filter out rows with NA values in the hiv_diag_date column
df_new <- df_new %>%
  filter(!is.na(hiv_diag_date))

# Filter observations with diagnosis_date before October 1, 2022
observations_before_oct_2022 <- df_new %>%
  filter(hiv_diag_date < as.Date("2022-10-01"))

# Filter out observations before October 1, 2022
df_new_filtered <- df_new %>%
  filter(hiv_diag_date >= as.Date("2022-10-01"))

# Compare counts
total_observations <- nrow(df_new)
num_before_oct_2022 <- nrow(observations_before_oct_2022)
num_after_oct_2022 <- nrow(df_new_filtered)

cat("Total observations:", total_observations, "\n")
cat("Number of observations with NA hiv_diag_date:", num_na_diag_date, "\n")
cat("Number of observations before October 1, 2022:", num_before_oct_2022, "\n")
cat("Number of observations after excluding those before October 1, 2022:", num_after_oct_2022, "\n")

```



# Analyze age 
```{r}
# Count observations with NA hiv_diag_date
num_na_dob <- sum(is.na(df_new_filtered$dob))

# Calculate age
df_new_filtered$age <- floor(interval(df_new_filtered$dob, Sys.Date()) / years(1))

# Ensure 'age' is numeric
df_new_filtered$age <- as.numeric(df_new_filtered$age)

# Categorize age into "<5, 05-14, 15-24, 25-49, 50+"
df_new_filtered$age_cat <- cut(df_new_filtered$age, 
                      breaks = c(-Inf, 5, 15, 25, 50, Inf), 
                      labels = c("<5", "05-14", "15-24", "25-49", "50+"), 
                      right = FALSE)

# Convert age_cat to a factor and set levels in increasing order
df_new_filtered$age_cat <- factor(df_new_filtered$age_cat, 
                         levels = c("<5", "05-14", "15-24", "25-49", "50+"))

summary(df_new_filtered$age)

# Count how many people are over 90 years old
num_over_90 <- df_new_filtered %>%
  filter(age > 90) %>%
  nrow()

# Print the count
cat("Number of people over 90 years old:", num_over_90, "\n")



```

```{r}
# Visualize the distribution of age using a histogram
ggplot(df_new_filtered, aes(x = age)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
  labs(title = "Distribution of Ages", 
       x = "Age", 
       y = "Count") +
  theme_minimal()



# Visualize distribution of age categories
ggplot(df_new_filtered, aes(x = age_cat)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Distribution of Age Categories", 
       x = "Age Category", 
       y = "Count") +
  theme_minimal()
```
# understand how many children were diagnosed with HIV less than 6 weeks after birth 

```{r}
# Calculate the age at diagnosis in days
df_new_filtered <- df_new_filtered %>%
  mutate(days_to_diagnosis = as.numeric(difftime(hiv_diag_date, dob, units = "days")))

# Filter children diagnosed less than 6 weeks (42 days) after birth
children_diagnosed_less_than_6_weeks <- df_new_filtered %>%
  filter(days_to_diagnosis < 42)

# Count the number of such children
num_children_diagnosed_less_than_6_weeks <- nrow(children_diagnosed_less_than_6_weeks)

# Print the count
cat("Number of children diagnosed less than 6 weeks after birth:", num_children_diagnosed_less_than_6_weeks, "\n")
```
# exclude the children diagnosed less than 6 weeks after birth: 37 
```{r}
# Exclude children diagnosed less than 6 weeks (42 days) after birth
df_new_filtered <- df_new_filtered %>%
  filter(days_to_diagnosis >= 42 | is.na(days_to_diagnosis))
# Remove the days_to_diagnosis column
df_new_filtered <- df_new_filtered %>%
  select(-days_to_diagnosis)
```





```{r}
# # Original number of unique client_ids before truncation
# orig_unique <- length(unique(df_new_filtered$client_id))
# 
# # Truncate client_id to the first 7 characters, concatenate with mfl_code, and create a unique identifier (UID)
# df_new_filtered <- df_new_filtered %>%
#   mutate(client_id_truncated = str_sub(client_id, 1, 7),
#          uid = paste0(client_id_truncated, "-", mfl_code)) %>%
#   relocate(uid, .after = client_id) %>%
#   select(-client_id_truncated, -client_id)
# 
# # Check if concatenated client_ids (UIDs) are now unique
# unique_id_check <- length(unique(df_new_filtered$uid)) == orig_unique
# print(unique_id_check)
# 
# # Create a new dataframe with the duplicates
# df_duplicates <- df_new_filtered %>%
#   group_by(uid) %>%
#   filter(n() > 1) %>%
#   ungroup()
# 
# # Display the number of duplicates
# cat("Number of duplicate rows:", nrow(df_duplicates), "\n")
# 
# # Display the dataframe with the duplicates
# print(df_duplicates)
```

create a new variable to identify tx_new entries 
```{r}
# Add a new variable 'entry_category' with the value 'tx_new' for all observations
df_new_filtered <- df_new_filtered %>%
  mutate(entry_category = "tx_new")

```


Create summary table 
```{r}
library(gt)
library(gtsummary)

summary_table <- df_new_filtered %>%
  select(-ip, -facility, -mfl_code, -county, -id, -dob, -hiv_diag_date, -diag_entry_date, -art_init_date,-art_init_date,-art_init_reg,art_init_reg, -init_reg_line, -curr_reg,-date_reg_change, -entry_category, -art_init_reg, -age) %>%
  tbl_summary(
   # by = assessment_type,
    statistic = all_categorical() ~ "{n} ({p}%)",
   # missing = "no",  # Ensures all levels are shown
    label = list(
      age_cat ~ "Age (years)",
      sex ~ "Sex",
      who_state_at_diag ~"WHO Diagnosis stage"
    )
  ) %>%
  modify_header(label ~ "**Characteristics**") %>%
  as_gt() %>%
  tab_header(
    title = md("**New on Treatment Demographic Characteristics**")
  ) %>%
  tab_options(
    table.width = pct(100),
    column_labels.font.weight = "bold"
  ) %>%
  tab_style(
    style = cell_text(size = px(12)),  # Adjust font size if needed
    locations = cells_body()
  )
# Display the summary table
summary_table
```



#write the clean tx_new data into the Dataout folder

```{r}
# Define the path to the output file
output_dir <- "./Dataout"
output_file_path <- file.path(output_dir, "tx_new.rds")

# Save the df_new_filtered dataframe as an RDS file
saveRDS(df_new_filtered, file = output_file_path)

# Confirmation message
cat("Dataframe has been saved to", output_file_path, "\n")

```
