---
title: "ADVANCE HIV Disease Newly initiated cleaning"
author: "Nelly Maina"
format: html
editor: visual
---

## Newly Initiated

From the National Data Warehouse (NDW), line list all clients who were newly initiated(TX_NEW) at any time between the period October 1, 2022, and September 30, 2023 (FY23). DO NOT double-report clients. De-identify the clients. Do not include any information that can identify them. Ensure the de-identified number can be used to link back to the client in case there is a need to address any data quality issues.

## Variable description

For each client listed, indicate the following variables: a). Implementing Partner - indicate the current implementing partner supporting the facility where the client receives ART treatment. b). Facility Name - facility or clinic where the client receives ART treatment. c). Facility MFL Code - facility or clinic master facility code where the client receives ART treatment. d). County â€“ the county where the facility is located. e). Client Number - the unique de-identified number allocated to the client for identification. f). Date of Birth - indicate the client's date of birth. The dates take the format DD/MM/YYYY. g). Sex - Male or Female. h). Date of HIV Diagnosis - indicate the date the client received an HIV-positive diagnosis. The dates take the format DD/MM/YYYY. i). Entry point at HIV Diagnosis - indicate the client's entry point at HIV diagnosis PMTCT, OPD, VCT, TB clinic e.t.c j). WHO stage at HIV Diagnosis - indicates the WHO clinical staging at diagnosis. k). Date of ART Initiation - indicates the date the client started the ART treatment. The dates take the format DD/MM/YYYY. l). ART Regimen at Initiation - indicate the client's ART regimen at treatment initiation. m). ART Regimen Line at Initiation - indicate whether the ART regimen indicated in (l) above is either first-line, second-line, or third-line. n). Current ART regimen - indicate the current ART regimen the client is on. o). Date of ART regimen change - if the current ART regimen is different from the ART regimen at initiation, then indicate the date when the change occurred. The dates take the format DD/MM/YYYY.

Load packages

```{r}
library(tidyverse)
library(glamr)
library(readxl)
library(janitor)
library(lubridate)
library(stringr)
library(readr)
```

Read the data from the Newly Initiated tab

```{r}

df_new <- read_excel("Data/Data - AHD.xlsx", 
  sheet = "1. Newly Initiated ", col_names = FALSE)


# Use the second row as the column names
colnames(df_new) <- df_new[2, ]

# Remove the first two rows
df_new <- df_new[-c(1, 2), ]

# Convert the necessary columns to the appropriate types
df_new <- df_new %>%
  mutate(
    `Date of HIV Diagnosis` = as.Date(as.numeric(`Date of HIV Diagnosis`), origin = "1899-12-30"),
    `Date of Birth` = as.Date(as.numeric(`Date of Birth`), origin = "1899-12-30"),
    `Date of ART Initiation` = as.Date(as.numeric(`Date of ART Initiation`), origin = "1899-12-30"),
    `Date of ART regimen change` = as.Date(as.numeric(`Date of ART regimen change`), origin = "1899-12-30"),
    `Implementing Partner` = as.factor(`Implementing Partner`),
    `Facility Name` = as.factor(`Facility Name`),
    `Sex` = as.factor(Sex),
    `Entry point at HIV Diagnosis` = as.factor(`Entry point at HIV Diagnosis`),
     `County` = as.factor(`County`),
    `ART Regimen at Initiation` = as.factor(`ART Regimen at Initiation`),
    `ART  Regimen Line at Initiation` = as.factor(`ART  Regimen Line at Initiation`),
     `Current ART regimen` = as.factor(`Current ART regimen`)
    
  )

```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
# Renaming columns
df_new <- df_new %>% clean_names()
print(names(df_new))

df_new <- df_new %>%
  rename(
    ip = implementing_partner,
    facility_name = facility_name,
    mfl_code = facility_mfl_code,
    county = county,
    client_id = client_number_de_identified,
    dob = date_of_birth,
    sex = sex,
    diag_date = date_of_hiv_diagnosis,
    diag_entry_date = entry_point_at_hiv_diagnosis,
    who_state_at_diag = who_stage_at_hiv_diagnosis,
    init_date = date_of_art_initiation,
    art_init_reg = art_regimen_at_initiation,
    init_reg_line = art_regimen_line_at_initiation,
    curr_reg = current_art_regimen,
    date_reg_change = date_of_art_regimen_change
  )

```

check for duplicates \_ no full duplicates

```{r}
# Check for duplicates by all variables
duplicates_all <- df_new %>%
  filter(duplicated(.))

# Display the number of duplicates by all variables
cat("Number of duplicates by all variables:", nrow(duplicates_all), "\n")

# Display the duplicated rows by all variables
print(duplicates_all)

# Check for duplicates by client_id
duplicates_client_id <- df_new %>%
  group_by(client_id) %>%
  filter(n() > 1) %>%
  ungroup()

# Display the number of duplicates by client_id
cat("Number of duplicates by client_id:", nrow(duplicates_client_id), "\n")

# Display the duplicated rows by client_id
print(duplicates_client_id)

```

```{r}

# Determine the date range for diagnosis_date
date_range <- df_new %>%
  summarise(
    min_date = min(diag_date, na.rm = TRUE),
    max_date = max(diag_date, na.rm = TRUE)
  )

# Display the date range
print(date_range)

```

# we have 2999 tx_new that before October 1,2022

```{r}
# Filter observations with diagnosis_date before October 1, 2022
observations_before_oct_2022 <- df_new %>%
  filter(diag_date < as.Date("2022-10-01"))

# Display the number of observations and the observations themselves
cat("Number of observations with diagnosis_date before October 1, 2022:", nrow(observations_before_oct_2022), "\n")
# Filter out observations with diagnosis_date before October 1, 2022
df_new_filtered <- df_new %>%
  filter(diag_date >= as.Date("2022-10-01"))

# Display the number of observations in the filtered dataframe
cat("Number of observations in df_new after excluding those before October 1, 2022:", nrow(df_new_filtered), "\n")

# Display the filtered dataframe
print(df_new_filtered)
```

```{r}
# Original number of unique client_ids before truncation
orig_unique <- length(unique(df_new_filtered$client_id))

# Truncate client_id to the first 7 characters, concatenate with mfl_code, and create a unique identifier (UID)
df_new_filtered <- df_new_filtered %>%
  mutate(client_id_truncated = str_sub(client_id, 1, 7),
         uid = paste0(client_id_truncated, "-", mfl_code)) %>%
  relocate(uid, .after = client_id) %>%
  select(-client_id_truncated)

# Check if concatenated client_ids (UIDs) are now unique
unique_id_check <- length(unique(df_new_filtered$uid)) == orig_unique
print(unique_id_check)

# Create a new dataframe with the duplicates
df_duplicates <- df_new_filtered %>%
  group_by(uid) %>%
  filter(n() > 1) %>%
  ungroup()

# Display the number of duplicates
cat("Number of duplicate rows:", nrow(df_duplicates), "\n")

# Display the dataframe with the duplicates
print(df_duplicates)
```

#write the clean tx_new data into the Dataout folder

```{r}
# Define the path to the output file
output_dir <- "./Dataout"
output_file_path <- file.path(output_dir, "tx_new.rds")

# Save the df_new_filtered dataframe as an RDS file
saveRDS(df_new_filtered, file = output_file_path)

# Confirmation message
cat("Dataframe has been saved to", output_file_path, "\n")

```
